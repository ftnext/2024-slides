**仮想環境**
======================================================================

Python環境はおもちですか？ / Is your Python environment a ricecake?

ディレクトリ！
--------------------------------------------------

* 仮想環境とは **ディレクトリ** のこと
* Pythonで開発する場合、まずディレクトリ（仮想環境）を用意する

他のプログラミング言語では
--------------------------------------------------

* pnpm (:file:`node_modules`) TODO
* composer (:file:`vendor`)
* Pythonは開発者が都度作ります

依存ライブラリが置かれる場所
--------------------------------------------------

* **site-packages** というディレクトリ（1箇所）
* サードパーティのライブラリは `PyPI <https://pypi.org/>`__ （など）にある
* インストールしたライブラリは、Python環境の :file:`site-packages` に置かれる

仮想環境で **プロジェクトごとのsite-packages** を用意
------------------------------------------------------------

* 仮想環境（ディレクトリ）には :file:`site-packages` ディレクトリも含む
* プロジェクトに必要な依存は仮想環境の :file:`site-packages` に置く
* 1台のマシンに、同じライブラリの **バージョン違いを共存** させられる

仮想環境を作るツール
--------------------------------------------------

* 標準ライブラリの `venv <https://docs.python.org/ja/3/library/venv.html>`__
* サードパーティの `virtualenv <https://virtualenv.pypa.io/en/latest/index.html>`__
* virtualenvが先にあり、人気を受けて標準に入った（`PEP 405 <https://peps.python.org/pep-0405/>`__）

仮想環境はこんなディレクトリ
--------------------------------------------------

.. literalinclude:: virtualenv-tree.txt
    :language: txt

仮想環境管理ツール、**俺たち**
======================================================================

* Pythonにおいて、仮想環境を扱う方法（の1つ）は **人力** 頼みです
* `Pythonチュートリアル <https://docs.python.org/ja/3/tutorial/venv.html>`__ などで紹介されており、膾炙しています

仮想環境のワークフロー
--------------------------------------------------

1. 仮想環境を作る
2. 仮想環境を有効にする
3. 依存ライブラリをインストール

仮想環境の管理に使うツール
--------------------------------------------------

* 作る：先に紹介した venv, virtualenv
* インストール：pip

  * サードパーティだが、基本的に **Pythonが使えればpipも使える** ようになっている

仮想環境のワークフロー（コマンド）
--------------------------------------------------

.. code-block:: shell

    $ python -m venv .venv --upgrade-deps  # 1
    $ source .venv/bin/activate  # 2
    (.venv) $ python -m pip install -r requirements.txt  # 3

俺たちは機能豊富ではない
--------------------------------------------------

* Python開発者がvenvやpipを操作する場合、順風満帆ではない
* 依存ライブラリのアンインストールがツラい例
* インストーラーのpip自体が高機能ではない

**小さい部品を組合せ** られるんだ！
--------------------------------------------------

* venvやpipなど、機能ごとに小さなモジュール
* 組合せて依存ライブラリ管理をする（レゴブロックのイメージ）
* ここまでは、人間がvenvとpipを組合せた例

シンプル（≒レゴブロック）
--------------------------------------------------

.. raw:: html

    <iframe class="speakerdeck-iframe" style="border: 0px; background: rgba(0, 0, 0, 0.1) padding-box; margin: 0px; padding: 0px; border-radius: 6px; box-shadow: rgba(0, 0, 0, 0.2) 0px 5px 40px; width: 100%; height: auto; aspect-ratio: 560 / 315;" frameborder="0" src="https://speakerdeck.com/player/857d8c682a044955b82f6fb7377604aa?slide=8" title="Pythonのパッケージ管理の中級者の壁を超える stapy#98" allowfullscreen="true" data-ratio="1.7777777777777777"></iframe>

組み合わせる提案いくつも
--------------------------------------------------

* Pythonに依存ライブラリ管理ツールがたっくさんあるのは、**小さな部品を組合せられる** から
* 各自が感じる課題を解消する組合せ方のたっくさんの提案
* Poetry, Pipenv, PDM, Flit, ... （この後にも登場します）

.. TODO Poetryの流れ
