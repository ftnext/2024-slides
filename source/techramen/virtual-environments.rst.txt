**仮想環境**
======================================================================

Python環境はおもちですか？ / Is your Python environment a rice cake?

ディレクトリ！
--------------------------------------------------

* 仮想環境とは、ディレクトリのこと
* そこに依存ライブラリを配置する
* Pythonで開発する場合、 **まずディレクトリ（仮想環境）を用意する**

他の言語ではツールが自動で配置ディレクトリを作る
--------------------------------------------------

* pnpm (:file:`node_modules`)
* composer (:file:`vendor`)

.. pnpm create hono@latest
.. composer require --dev phpunit/phpunit

Pythonでは作っているか **意識** する必要あり

Pythonで依存ライブラリが置かれる場所
--------------------------------------------------

* **site-packages** というディレクトリ
* `PyPI <https://pypi.org/>`__ （など）からライブラリをダウンロードして配置
* Python処理系の持つ :file:`site-packages` は1箇所だけ（👉バージョン違いは上書きし合う😱）

仮想環境で **プロジェクトごとのsite-packages** を用意✅
------------------------------------------------------------

* 仮想環境（ディレクトリ）には :file:`site-packages` ディレクトリも含む
* プロジェクトに必要な依存を仮想環境の :file:`site-packages` に置くように運用
* 1台のマシンに、同じライブラリの **バージョン違いを共存** させられる

仮想環境を作るツール
--------------------------------------------------

* 標準ライブラリの `venv <https://docs.python.org/ja/3/library/venv.html>`__
* サードパーティの `virtualenv <https://virtualenv.pypa.io/en/latest/index.html>`__
* virtualenvが先にあり、人気を受けて標準に入った（`PEP 405 <https://peps.python.org/pep-0405/>`__）

仮想環境はこんなディレクトリ
--------------------------------------------------

.. literalinclude:: virtualenv-tree.txt
    :language: txt

.. _Pythonチュートリアル: https://docs.python.org/ja/3/tutorial/venv.html

仮想環境管理ツール、**俺たち** 😎
======================================================================

* Pythonにおいて、仮想環境を扱う方法（の1つ）は **人力** 頼みです
* `Pythonチュートリアル`_ などで紹介されており、膾炙しています

仮想環境のワークフロー
--------------------------------------------------

1. 仮想環境を作る
2. 仮想環境を有効にする
3. 依存ライブラリをインストール

仮想環境の管理に使うツール
--------------------------------------------------

1. 仮想環境を作る：venv（やvirtualenv）
2. 仮想環境を有効にする：俺たち！
3. 依存ライブラリをインストール：pip

`Pythonチュートリアル`_ に沿っています

仮想環境のワークフロー（コマンド）
--------------------------------------------------

.. code-block:: shell

    $ python -m venv .venv --upgrade-deps  # 1
    $ source .venv/bin/activate  # 2
    (.venv) $ python -m pip install openai  # 3

仮想環境の再現（*best effort*）
--------------------------------------------------

1. インストールされたライブラリとバージョンを列挙したファイルを俺たちが作る（人力）
2. 別の仮想環境で、1のファイルを元にインストール

ライブラリとバージョンを列挙したファイル
--------------------------------------------------

.. code-block:: shell

    (.venv) $ python -m pip freeze > requirements.txt

.. code-block:: txt

    kojo-fan-art==0.1.1

ファイルを元にした仮想環境の再現
--------------------------------------------------

.. code-block:: shell

    $ python -m venv .venv2 --upgrade-deps
    $ source .venv2/bin/activate
    (.venv2) $ python -m pip install -r requirements.txt

人力のためにゆらぐ
--------------------------------------------------

* :file:`requirements.txt` という名前の揺れ（拙ブログ：`Python使いはpip freezeの出力を常にrequirements.txtというファイルに保存する？ <https://nikkie-ftnext.hatenablog.com/entry/various-file-names-of-pip-freeze>`__）
* :command:`pip freeze` の出力を含まない :file:`requirements.txt` （全ての依存がない！）

俺たちは機能豊富ではない
--------------------------------------------------

* Python開発者がvenvやpipを操作する場合、順風満帆ではない😫
* ツラかった例： `いくつかをアンインストールし <https://nikkie-ftnext.hatenablog.com/entry/python-dependency-management-pip-only-uninstall-pain>`__ 、:file:`requirements.txt` も更新
* pipはインストールできたバージョンを書き出す（多くのツールは **逆** では？）

でも **小さい部品を組合せ** てるんだ！
--------------------------------------------------

* venvやpipなど、機能ごとに小さなモジュール
* 組合せて依存ライブラリ管理をする
* ここまでは、**人間がvenvとpipを組合せ** た例

シンプル（≒レゴブロック）
--------------------------------------------------

.. raw:: html

    <iframe class="speakerdeck-iframe" style="border: 0px; background: rgba(0, 0, 0, 0.1) padding-box; margin: 0px; padding: 0px; border-radius: 6px; box-shadow: rgba(0, 0, 0, 0.2) 0px 5px 40px; width: 100%; height: auto; aspect-ratio: 560 / 315;" frameborder="0" src="https://speakerdeck.com/player/857d8c682a044955b82f6fb7377604aa?slide=8" title="Pythonのパッケージ管理の中級者の壁を超える stapy#98" allowfullscreen="true" data-ratio="1.7777777777777777"></iframe>

組み合わせる提案いくつも
--------------------------------------------------

* Pythonに依存ライブラリ管理ツールがたっくさんあるのは、**小さな部品を組合せられる** から
* 各自が感じる課題を解消する組合せ方のたっくさんの提案（*楽してこーぜ*）
* Poetry, Pipenv, PDM, Flit, ... （この後にも登場します）

例：Poetry
======================================================================

仮想環境管理ツール 俺たち のペインを解消

Poetryはこんなツール
--------------------------------------------------

* インストールにPython環境が必要
* **仮想環境の管理** を担ってくれる
* ライブラリの公開など多岐にサポート

Poetryを使ったプロジェクト
--------------------------------------------------

* 依存ライブラリの追加は :command:`poetry add`
* Poetryはプロジェクトごとに仮想環境を管理（開発者は意識しない）
* Poetryが :file:`poetry.lock` も管理（:file:`requirements.txt` と異なり独自仕様）

Poetryを使ったプロジェクトの再現
--------------------------------------------------

* :command:`poetry install` （以上！）
* :file:`poetry.lock` に沿って仮想環境を再現
* 詳しくは https://python-poetry.org/docs/basic-usage/

小まとめ🥟：仮想環境
======================================================================

* プロジェクトごとにライブラリをインストールするための仕組み
* 仮想環境管理の代表的な方法は、 **人力**
* 人力に代わる仮想環境管理ツールがいくつも提案されている

.. revealjs-break::
    :notitle:

.. list-table:: 仮想環境管理機能の比較
    :header-rows: 1

    * - 項目
      - 俺たち
      - Poetry
    * - Pythonのバージョン
      - 管理しない
      - 管理しない
    * - ライブラリのバージョン
      - 仮想環境にインストールして管理
      - 管理（仮想環境を意識させない）
    * - 仮想環境の再現
      - 手順が漏れうる
      - 完全サポート

ℹ️拙ブログより 仮想環境 🏃‍♂️
--------------------------------------------------

* `登壇報告 | みんなのPython勉強会#103 にてPythonで仮想環境にライブラリをインストールするんだと（ただそれだけを）話しました <https://nikkie-ftnext.hatenablog.com/entry/stapy-103-python-virtual-environment-basic-talk>`__
* `俺がPythonのパッケージマネージャなんだ <https://nikkie-ftnext.hatenablog.com/entry/pythonistas-are-part-of-python-package-manager-system>`__
* `Python仮想環境DASH村。シェルのコマンドだけで作ってみる（あくまで学習目的です） <https://nikkie-ftnext.hatenablog.com/entry/make-python-virtual-environment-with-shell-commands>`__
* `virtualenvはPython標準ライブラリのvenvを使って仮想環境を作っている <https://nikkie-ftnext.hatenablog.com/entry/python-virtualenv-delegates-to-venv>`__
