.. _PEP 723: https://peps.python.org/pep-0723/
.. _Inline script metadata (Python Packaging User Guide): https://packaging.python.org/en/latest/specifications/inline-script-metadata/

`PEP 723`_ が拓く世界
======================================================================

`Inline script metadata (Python Packaging User Guide)`_

提案経緯（PEPのMotivationより）
======================================================================

* 単一ファイルの **Pythonスクリプトは日常的**
* テキストが書ければ共有できる（メール、URL、チャット）
* では、スクリプトの実行に必要な情報は？

スクリプトの実行に必要な情報
--------------------------------------------------

* スクリプトを実行するPythonのバージョン（新しい書き方をしているかも）
* スクリプトが依存するライブラリ（``import`` 文）

実行ツール向けに定義する **標準的な仕組みはなかった**

提案💡 Inline script metadata
--------------------------------------------------

* スクリプトの実行に必要な情報＝スクリプトのメタデータ
* **スクリプトの中に** （inline） ツール向けの **メタデータを書こう**

Inline script metadataのユースケース
--------------------------------------------------

* スクリプトを実行する **ツールが読み取る** 🌟🌟
* 単一スクリプトからPythonプロジェクトへ移行しやすく
* スクリプトの依存を手動で管理しない 🌟🌟

Inline script metadataの書き方
======================================================================

.. code-block:: python

    # /// script
    # dependencies = [
    #   "requests<3",
    #   "rich",
    # ]
    # requires-python = ">=3.11"
    # ///

`How to Teach This (PEP 723) <https://peps.python.org/pep-0723/#how-to-teach-this>`__

Inline script metadataは、スクリプト冒頭の **コメント**
------------------------------------------------------------

.. code-block:: python
    :emphasize-lines: 1,7

    # /// script  <-- 始まり
    # dependencies = [
    #   "requests<3",  <-- 間の部分もPython処理系にとってはコメント
    #   "rich",
    # ]
    # requires-python = ">=3.11"
    # ///  <-- 終わり

2つのメタデータ
--------------------------------------------------

* dependencies
* requires-python

`TOML <https://toml.io/ja/>`__ 形式

dependencies
--------------------------------------------------

* スクリプト実行時の依存ライブラリを書く

.. code-block:: python

    # /// script
    # dependencies = ["requests<3", "rich"]
    # ///

* `PEP 508 <https://peps.python.org/pep-0508/#examples>`__ の書き方でバージョン指定

.. code-block::

    requests [security,tests] >= 2.8.1, == 2.8.* ; python_version < "2.7"

requires-python
--------------------------------------------------

* スクリプトを実行できるPythonのバージョン

.. code-block:: python

    # /// script
    # requires-python = ">=3.11"
    # ///

* `PEP 440のversion specifier <https://peps.python.org/pep-0440/#version-specifiers>`__ で指定

.. code-block::

    ~= 0.9, >= 1.0, != 1.3.4.*, < 2.0

`PEP 723`_ の仕様や実装
======================================================================

もう少しだけ深く見ていきます

導入されたのは ``TYPE`` 付きのメタデータ
--------------------------------------------------

.. code-block:: python

    # /// TYPE
    # 
    # ///

* ``TYPE`` が ``script`` のとき、inline script metadata
* （追加の ``TYPE`` を提案できるかも！？）

inline script metadataには ``[tool]`` も書ける
------------------------------------------------------------

* :file:`pyproject.toml` でおなじみ ``[tool]`` テーブル（`PEP 518 <https://peps.python.org/pep-0518/#tool-table>`__）
* inline script metadataにも書けます！（後ほど登場）

.. code-block:: toml

    [tool.pytest.ini_options]
    addopts = "-ra -q"

.. https://docs.pytest.org/en/stable/reference/customize.html#pyproject-toml

実装例
------------------------------------------------------------

* **正規表現** でパースする

.. code-block:: python

    REGEX = r'(?m)^# /// (?P<type>[a-zA-Z0-9-]+)$\s(?P<content>(^#(| .*)$\s)+)^# ///$'

`Reference Implementation (PEP 723) <https://peps.python.org/pep-0723/#reference-implementation>`__

正規表現の読み解き 🏃‍♂️
------------------------------------------------------------

:`(?m) <https://docs.python.org/ja/3/library/re.html#re.M>`__: マルチラインのフラグ
:`(?P<name>...) <https://docs.python.org/ja/3/library/re.html#index-18>`__: マッチした部分文字列に ``name`` でアクセス

``content`` はTOMLなので `tomllib <https://docs.python.org/ja/3/library/tomllib.html>`__ で読み込みます

PEP 723を実装しました💪 🏃‍♂️
------------------------------------------------------------

* :fab:`github` `ftnext/pep723 <https://github.com/ftnext/pep723>`__
* inline script metadataの dependencies を見て一時的な仮想環境で実行
* 皆さんが使うならこの後紹介するツールをぜひ🧰

まとめ🌯 `PEP 723`_ が拓く世界
======================================================================

* スクリプトに書ける ``TYPE=script`` のmetadataを導入した（*inline script metadata*）
* **開発者はスクリプト実行に必要な情報をmetadataに書く**
* *ツール* がmetadataを参照してスクリプトを実行

inline script metadataの書き方
------------------------------------------------------------

.. literalinclude:: metadata_introduction.py
    :language: python
