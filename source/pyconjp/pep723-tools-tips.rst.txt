拓かれた世界で
======================================================================

* 学びの共有
* tips共有

inline script metadataをサポートしたツールを使っての学び
======================================================================

2点共有

inline script metadataより前
--------------------------------------------------

* スクリプトと合わせて、 **依存ライブラリを何らかの方法で示す** 必要あり
* 例えば :file:`requirements.txt`

.. code-block:: shell

    $ .venv/bin/python -m pip freeze > requirements.txt 

他の開発者にスクリプトを渡すとき
--------------------------------------------------

* 他の開発者（未来の私も含む）は **仮想環境の再現が手間**
* :file:`requirements.txt` だけでなく、環境構築コマンドをまとめた :file:`Makefile` も試したり試行錯誤
* ここがinline script metadataで変わった（天才！）

学び1️⃣ 一度動いたスクリプトを他の開発者に渡しやすい🙌
------------------------------------------------------------

* **スクリプトだけ渡せばOK**！（仮想環境の作り方の共有不要）
* 常時ペアプロ + 頻繁に交代という環境（※`今晩オンライン勉強会 <https://uzabase-tech.connpass.com/event/329824/>`__）では、ペアを交代してスクリプトの続きを書くのもやりやすい（仮想環境の構築が不要なので）

学び2️⃣ 簡単に依存ライブラリを追加できる🍰
--------------------------------------------------

* スクリプト用の仮想環境を使っていたときは、追加した依存ライブラリの共有が億劫
* 依存ライブラリの管理から解放されたので、**気軽に追加** できる

    * 例：表っぽく出力したい？ `tabulate <https://pypi.org/project/tabulate/>`__ 追加しましょう

inline script metadataをサポートしたツール向けtips
======================================================================

2点共有

1️⃣スクリプト書いているときは対話モードを立ち上げたい
======================================================================

* 途中まで書いて対話モードに入る
* データを見ながら続きを書き進める

.. code-block:: python

    import httpx

    resp = httpx.get("https://peps.python.org/api/peps.json")
    data = resp.json()

:command:`python -i`
--------------------------------------------------

    (略) スクリプトかコマンドを実行した後にインタラクティブモードに入ります。（`1. コマンドラインと環境 <https://docs.python.org/ja/3/using/cmdline.html#cmdoption-i>`__）

.. code-block:: shell

    (.venv) $ python -i script.py
    >>> type(data)
    <class 'dict'>

環境変数 ``PYTHONINSPECT``
--------------------------------------------------

    この変数に空でない文字列を設定するのは -i オプションを指定するのと等価です。（`1. コマンドラインと環境 <https://docs.python.org/ja/3/using/cmdline.html#envvar-PYTHONINSPECT>`__）

.. code-block:: shell

    $ PYTHONINSPECT=1 pipx run script.py
    $ PYTHONINSPECT=1 uv run script.py
    $ PYTHONINSPECT=1 hatch run script.py

拙ブログ関連エントリ 🏃‍♂️
--------------------------------------------------

* `inline script metadataをサポートしたツールでスクリプトを実行したときにもPythonの対話モードに入りたい！ 環境変数 PYTHONINSPECT が有効か調査しました <https://nikkie-ftnext.hatenablog.com/entry/pep723-inline-script-metadata-tools-support-pythoninspect-envvar-or-not>`__
* `pipx runとPYTHONINSPECT環境変数の補足：仮想環境を作るときは環境変数を指定できない <https://nikkie-ftnext.hatenablog.com/entry/pipx-run-hang-pythoninspect-and-venv-creation>`__

2️⃣エディタの補完を受けたい
======================================================================

VS Codeを例に話します（メソッドは応用できると期待）

``sys.executable``
--------------------------------------------------

    Python インタプリタの実行ファイルの絶対パスを示す文字列です。

https://docs.python.org/ja/3/library/sys.html#sys.executable

対話モードでインタプリタのパスを知る
--------------------------------------------------

.. code-block:: shell

    $ PYTHONINSPECT=1 hatch run example.py  # tips1️⃣！

.. code-block:: pycon

    >>> import sys
    >>> sys.executable
    '/Users/.../Library/Application Support/hatch/env/virtual/.scripts/tHs9jFaE/bin/python'

VS Codeで「:guilabel:`Select Interpreter`」
------------------------------------------------------------

* :guilabel:`Enter interpreter path...` に ``sys.executable`` の値を設定！

.. image:: ../_static/pyconjp/vscode_selected_tool_venv_interpreter.png

拙ブログ関連エントリ 🏃‍♂️
--------------------------------------------------

* `pipx runするスクリプトを書く中でも、VS Codeによる補完のサポートを受ける <https://nikkie-ftnext.hatenablog.com/entry/pipx-run-with-vscode-completion-setting>`__

まとめ🌯 拓かれた世界で（学びとtips）
======================================================================

* PEP 723をサポートしたツールを採用することで、スクリプトの **共有** やスクリプト実装中の **依存追加がやりやすい**
* **環境変数 PYTHONINSPECT を指定** して、対話モードを織り交ぜながらスクリプトを書ける！

  * エディタ補完のために ``sys.executable`` も確認
