拓かれた世界で
======================================================================

* 学びの共有
* tips共有

inline script metadataをサポートしたツールを使っての学び
======================================================================

2点共有

一度動いたスクリプトを他の開発者に渡しやすい
--------------------------------------------------

* **スクリプトだけ渡せばOK**！（仮想環境の作り方の共有不要）
* 常時ペアプロ + 頻繁に交代という環境では、ペアを交代してスクリプトの続きを書くのもやりやすい（仮想環境の構築が不要なので）

簡単に依存ライブラリを追加できる
--------------------------------------------------

* スクリプト用の仮想環境を使っていたときは、追加した依存ライブラリの共有が億劫
* 依存ライブラリの管理から解放されたので、気軽に追加できる

    * 例：表っぽく出力したい？ `tabulate <https://pypi.org/project/tabulate/>`__ 追加しましょう

inline script metadataをサポートしたツール向けtips
======================================================================

2点共有

スクリプト書いているときは対話モードを立ち上げたい
======================================================================

* 途中まで書いて対話モードに入る
* データを見ながら続きを書き進める

:command:`python -i`
--------------------------------------------------

    (略) スクリプトかコマンドを実行した後にインタラクティブモードに入ります。（`1. コマンドラインと環境 <https://docs.python.org/ja/3/using/cmdline.html#cmdoption-i>`__）

* uvは ``uv run python -i script.py`` が可能（渡しているのが **コマンド** なので）

環境変数 ``PYTHONINSPECT``
--------------------------------------------------

    この変数に空でない文字列を設定するのは -i オプションを指定するのと等価です。（`1. コマンドラインと環境 <https://docs.python.org/ja/3/using/cmdline.html#envvar-PYTHONINSPECT>`__）

.. code-block:: shell

    $ PYTHONINSPECT=1 pipx run script.py
    $ PYTHONINSPECT=1 hatch run script.py

エディタの補完を受けたい
======================================================================

VS Codeの話です（メソッドは応用できると期待）

``sys.executable``
--------------------------------------------------

    Python インタプリタの実行ファイルの絶対パスを示す文字列です。

https://docs.python.org/ja/3/library/sys.html#sys.executable

VS Codeで「Select Interpreter」
--------------------------------------------------

* 対話モードに入って ``sys.executable`` で **インタプリタのパスを知る**
* ``sys.executable`` の値を設定！

.. TODO uvもこれで行く？（環境の再利用が気になる）
