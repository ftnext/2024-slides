.. _logging.basicConfig(): https://docs.python.org/ja/3/library/logging.html#logging.basicConfig
.. _Logger.setLevel: https://docs.python.org/ja/3/library/logging.html#logging.Logger.setLevel

2️⃣アプリケーション開発におけるロギングの実装
======================================================================

ロギングが仕込まれたライブラリをどう使うか

アプリケーション開発者がログ出力を **カスタマイズ**！
------------------------------------------------------------

    ハンドラーやフォーマッター、フィルターを追加してログ出力をカスタマイズするのは (略)、アプリケーション開発者の責務です。

`ライブラリ内でロガーに NullHandler 以外のハンドラーを追加する`_ （再掲）

ログ出力のカスタマイズ 2通り
--------------------------------------------------

1. ルートロガーを設定（👈主な話題）
2. ライブラリのロガーを触る

.. TODO 2はこの記事を案内 https://nikkie-ftnext.hatenablog.com/entry/configure-python-librarys-logger

ルートロガーを設定する
======================================================================

アプリケーション開発者に提供される手段が ``logging.basicConfig()``

`logging.basicConfig()`_
--------------------------------------------------

    デフォルトの Formatter を持つ StreamHandler を生成してルートロガーに追加し、ロギングシステムの基本的な環境設定を行います。

``logging.basicConfig()`` に関わる概念
--------------------------------------------------

* ロギングレベル
* フォーマッタ

他の要素はドキュメントをどうぞ

.. _ロギングレベル: https://docs.python.org/ja/3/library/logging.html#logging-levels

`ロギングレベル`_ 一覧 🏃‍♂️
--------------------------------------------------

* ``NOTSET``
* ``DEBUG``
* ``INFO``
* ``WARNING``
* ``ERROR``
* ``CRITICAL``

ルートロガーのレベルを設定
--------------------------------------------------

.. code-block:: python

    logging.basicConfig(level=logging.WARNING)

* 「*level よりも深刻でないログメッセージは無視されます*」（公式ドキュメント `Logger.setLevel`_）

フォーマッタ
--------------------------------------------------

.. code-block:: python

    logging.basicConfig(format="%(levelname)s:%(name)s:%(message)s")

* ハンドラの出力に適用される **書式の設定** （ハンドラがフォーマッタを持つ）
* 使える属性名は `LogRecord 属性 <https://docs.python.org/ja/3/library/logging.html#logrecord-attributes>`__ に

`logging.basicConfig()`_ でルートロガーを設定
--------------------------------------------------

* ロギングレベル
* ハンドラ & フォーマッタ

アプリケーション開発者 **（ライブラリを使う側）が好きに** 決められます

ルートロガーを設定してライブラリのログを出力
======================================================================

**propagate** （伝播）

ロガーの親子関係（再び）
--------------------------------------------------

.. TODO 箇条書きじゃなくて図にしよう

* ルートロガー

    * ``spam`` ロガー

        * ``spam.ham`` ロガー

propagate（伝播）
--------------------------------------------------

* ``spam`` ロガーに設定されたロギングレベルは ``WARNING`` とする
* ``spam`` ロガーの ``warning()`` メソッドが呼ばれた
* そのログレコードは **親のロガーに伝播** しハンドラへ渡る

📌 ``NullHandler`` + ``basicConfig`` + propagate
------------------------------------------------------------

* ``mylib`` ロガーのロギングレベル以上のメソッドが呼ばれた
* ``mylib`` ロガーのハンドラ（``NullHandler``）が処理（するが出力はない）
* 親のルートロガーに伝播し、 **ルートロガーのハンドラで処理して出力される**

.. propagateされたログレコードは、親のロガーの **レベルより下でも** 親ロガーのハンドラに渡る

あれ？ ライブラリのロガーのレベルって？
======================================================================

今一度 **ライブラリ開発者向け** の話になります

``NullHandler`` 以外はいけません（結論・再掲）
--------------------------------------------------

.. code-block:: python

    import logging

    logger = logging.getLogger("mylib")
    logger.addHandler(logging.NullHandler())

ライブラリのロガーに **ロギングレベルは設定していない**

ロギングレベル ``NOTSET``
--------------------------------------------------

    ロガーが生成された際、レベルは NOTSET (略) に設定されます。

`Logger.setLevel`_ より

``NOTSET`` とは
--------------------------------------------------

    もしロガーのレベルが NOTSET ならば、祖先ロガーの系列の中を NOTSET 以外のレベルの祖先を見つけるかルートに到達するまで辿っていく

`Logger.setLevel`_ より（「*親ロガーに委譲*」）

ライブラリのロガーにロギングレベルを設定したいとき
--------------------------------------------------

* 親をそのまた親へとたどっていき、最初に見つかった ``NOTSET`` 以外のレベルになる、ということ
* mylibロガーの親 **ルートロガーに設定したレベル** となる！

例：ルートロガーのロギングレベルが ``WARNING`` だと出力されない
----------------------------------------------------------------------

.. code-block:: python
    :caption: ライブラリ

    import logging

    logger = logging.getLogger("mylib")
    logger.addHandler(logging.NullHandler())

    logger.info("想定通り")

.. code-block:: python
    :caption: アプリケーション

    logging.basicConfig(level=logging.WARNING)

例：ルートロガーのロギングレベルが ``DEBUG`` だと **出力される**
----------------------------------------------------------------------

.. code-block:: python

    import logging

    logger = logging.getLogger("mylib")
    logger.addHandler(logging.NullHandler())

    logger.info("想定通り")

.. code-block:: python
    :caption: アプリケーション

    logging.basicConfig(level=logging.DEBUG)

ライブラリのコードは同じ。 **違いはルートロガーのロギングレベル**

まとめ🥟 アプリケーション開発におけるロギングの実装
======================================================================

.. code-block:: python

    logging.basicConfig(level=logging.DEBUG, format="%(levelname)s:%(name)s:%(message)s")

* ライブラリを使う側の都合で、ルートロガーを設定
* ロガーの親子関係のpropagateで、 **ルートロガーのハンドラでログ出力**
* ライブラリのロガーはレベル ``NOTSET`` （＝ルートロガーのレベル参照）
