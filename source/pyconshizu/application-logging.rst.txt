.. _logging.basicConfig(): https://docs.python.org/ja/3/library/logging.html#logging.basicConfig
.. _ロギングレベル: https://docs.python.org/ja/3/library/logging.html#logging-levels
.. _propagate: https://docs.python.org/ja/3/library/logging.html#logging.Logger.propagate

2️⃣アプリケーション開発におけるロギングの実装
======================================================================

ロギングが仕込まれたライブラリをどう使うか

アプリケーション開発者がログ出力を **カスタマイズ**！
------------------------------------------------------------

    ハンドラーやフォーマッター (略) を追加してログ出力をカスタマイズするのは (略)、アプリケーション開発者の責務です。

`ライブラリ内でロガーに NullHandler 以外のハンドラーを追加する`_ 📄（再掲）

ログ出力のカスタマイズ 2通り
--------------------------------------------------

1. **ルートロガーを設定** （👈主な話題）
2. ライブラリのロガーを触る

ルートロガーを設定する
======================================================================

アプリケーション開発者に提供される手段が ``logging.basicConfig()``

`logging.basicConfig()`_ 📄
--------------------------------------------------

    デフォルトの Formatter を持つ StreamHandler を生成してルートロガーに追加し、ロギングシステムの基本的な環境設定を行います。

``logging.basicConfig()`` に関わる概念
--------------------------------------------------

* ロギングレベル
* フォーマッタ

他の要素は公式ドキュメントをどうぞ

ルートロガーのレベルを設定
--------------------------------------------------

.. code-block:: python

    logging.basicConfig(level=logging.WARNING)

* loggingでは、ロガーの持つレベル以上の重要性のイベントがログに記録される（再掲）

フォーマッタ
--------------------------------------------------

.. code-block:: python

    logging.basicConfig(format="%(levelname)s:%(name)s:%(message)s")

* ハンドラは1つのフォーマッタを持つ
* ハンドラの出力に適用される **書式の設定**

書式設定に使える属性名 🏃‍♂️
--------------------------------------------------

.. code-block:: python

    format="%(asctime)s | %(levelname)s | %(name)s:%(funcName)s:%(lineno)d - %(message)s"

`LogRecord 属性 <https://docs.python.org/ja/3/library/logging.html#logrecord-attributes>`__ 📄

ルートロガーをカスタマイズ
--------------------------------------------------

アプリケーション開発者 **（ライブラリを使う側）が好きに** 決められます

* ロギングレベル
* ハンドラ & フォーマッタ

ルートロガーを設定してライブラリのログを出力
======================================================================

**propagate** （伝播）

ロガーの `propagate`_ 属性📄
--------------------------------------------------

    この属性が真と評価された場合、このロガーに記録されたイベントは、このロガーに取り付けられた全てのハンドラに加え、上位 (祖先) ロガーのハンドラにも渡されます。    

ロガーの親子関係（再び）
--------------------------------------------------

.. image:: ../_static/pyconshizu/logger-ancestors-part.drawio.png
    :scale: 120%

propagate（伝播）
--------------------------------------------------

* ``spam`` ロガーのロギングレベル以上のメソッドが呼ばれた

    * 例：ロガーのレベルは ``WARNING`` で、 ``warning()`` メソッドが呼ばれた

* そのログレコードは **親のロガーに伝播** し、親のハンドラにも渡る

📌 ``NullHandler`` + ``basicConfig`` + propagate
------------------------------------------------------------

* ``mylib`` ロガーのロギングレベル以上のメソッドが呼ばれた
* ``mylib`` ロガーのハンドラ（``NullHandler``）が処理（するが出力はない）
* 親のルートロガーに伝播し、 **ルートロガーのハンドラで処理して出力される**

ドキュメント `propagate`_ の注釈📄より
------------------------------------------------------------

    一般的なシナリオでは、ハンドラをルートロガーに対してのみ接続し、残りは propagate にすべて委ねます。

.. _ロガー: `https://docs.python.org/ja/3/howto/logging.html#loggers`

`ロガー`_ 📄（上級ロギングチュートリアル）🏃‍♂️
------------------------------------------------------------

    子ロガーはメッセージを親ロガーのハンドラに伝えます。(略) トップレベルのロガーのためのハンドラだけ設定しておいて必要に応じて子ロガーを作成すれば十分です。

待って🤚 ライブラリのロガーのレベルって？
======================================================================

今一度 **ライブラリ開発者向け** の話になります

``NullHandler`` 以外はいけません（結論・再掲）
--------------------------------------------------

.. literalinclude:: ../../samplecode/python-logging/conclusion.py
    :language: python
    :lines: 1-4

ライブラリのロガーに **ロギングレベルは設定していない**

ロギングレベル ``NOTSET``
--------------------------------------------------

    ロガーが生成された際、レベルは NOTSET (略) に設定されます。

`Logger.setLevel`_ 📄より

``NOTSET`` とは
--------------------------------------------------

    もしロガーのレベルが NOTSET ならば、祖先ロガーの系列の中を NOTSET 以外のレベルの祖先を見つけるかルートに到達するまで辿っていく

`Logger.setLevel`_ 📄より（「*親ロガーに委譲*」）

ライブラリのロガーにロギングレベルを設定したいとき
--------------------------------------------------

* 親をそのまた親へとたどっていき、最初に見つかった ``NOTSET`` 以外のレベルになる、ということ（`ロギングレベル`_ 📄）
* ``mylib`` ロガーは、親の **ルートロガーに設定したレベル** となる！

拙ブログより ロギングレベル ``NOTSET`` 🏃‍♂️
--------------------------------------------------

* `自作のPythonライブラリでloggingを使うとき、ロガーにsetLevelしない？ ログレベルNOTSETのロガーの動きを理解する <https://nikkie-ftnext.hatenablog.com/entry/python-configuring-logging-for-library-log-level-notset>`__
* `Pythonの対話モードで確認できるロガーのレベルは、ロガーが持つレベルそのものではなく、実効（effective）レベル <https://nikkie-ftnext.hatenablog.com/entry/python-logger-repr-effective-level>`__

propagate まとめ🥟 ライブラリのロギング
======================================================================

.. literalinclude:: ../../samplecode/python-logging/example/mylib.py
    :language: python

例：ルートロガーのロギングレベルが ``WARNING`` だと出力されない
----------------------------------------------------------------------

.. literalinclude:: ../../samplecode/python-logging/example/warning_app.py
    :language: python
    :emphasize-lines: 5

``mylib`` ロガーも ``WARNING`` レベル

例：ルートロガーのロギングレベルが ``DEBUG`` だと **出力される**
----------------------------------------------------------------------

.. literalinclude:: ../../samplecode/python-logging/example/debug_app.py
    :language: python
    :emphasize-lines: 5

.. code-block:: txt

    INFO:mylib:想定通り

``mylib`` ロガーも ``DEBUG`` レベル

**違いはルートロガーのロギングレベル**
--------------------------------------------------

* ライブラリのコードは同じ
* ライブラリのロガーはレベル ``NOTSET`` で、ルートロガーのレベルを参照
* ライブラリを利用するアプリケーションコードでカスタマイズした

まとめ🥟 アプリケーション開発におけるロギングの実装
======================================================================

.. code-block:: python

    logging.basicConfig(level=logging.DEBUG, format="%(levelname)s:%(name)s:%(message)s")

* ライブラリを使う側の都合で、ルートロガーを設定
* ライブラリのロガーはルートロガーのレベルを参照し、propagateで **ルートロガーのハンドラでログ出力**

propagateは **親ロガーのレベルによらない** 🏃‍♂️
--------------------------------------------------

    メッセージは、祖先ロガーのハンドラに直接渡されます - 今問題にしている祖先ロガーのレベルもフィルタも、どちらも考慮されません。

`propagate`_

propagateで祖先ロガーのレベルが考慮されない例 🏃‍♂️
------------------------------------------------------------

.. literalinclude:: ../../samplecode/python-logging/propagate.py
    :language: python
    :lines: 1-11

.. literalinclude:: ../../samplecode/python-logging/propagate.py
    :language: txt
    :lines: 14

ライブラリのロガーを触ってログ出力をカスタマイズ 🏃‍♂️
------------------------------------------------------------

* アプリケーションコードで ``getLogger("mylib")`` し、レベル・ハンドラ・フォーマッタを設定
* 拙ブログ `Pythonのライブラリに用意されたロガーを設定してログを出力する（httpxを例に） <https://nikkie-ftnext.hatenablog.com/entry/configure-python-librarys-logger>`__
