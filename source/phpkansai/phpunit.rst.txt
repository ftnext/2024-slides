PHPUnitでテストを書こう
============================================================================================================================================

1部 2/2章：先のfizzbuzz関数のテストを書いてみましょう

**PHPUnit**
--------------------------------------------------

* PHPでテストコードを書くためのライブラリ
* https://phpunit.de/

PHPUnitをインストール
============================================================

* Composer
* PHAR

どちらかをやればいいです

Composerでインストール
--------------------------------------------------

* :command:`composer require --dev phpunit/phpunit`
* ちょうぜつ本 など

.. code-block:: txt

    .
    ├── composer.json
    ├── composer.lock
    └── vendor/
        └── bin/
            └── phpunit

PHARでインストール
--------------------------------------------------

* PHPUnitのドキュメントで推している
* https://docs.phpunit.de/en/10.5/installation.html#manual-download-of-phar

.. code-block:: txt

    .
    └── tools/
        └── phpunit

tips: Composerではautoload 🏃‍♂️ (skip)
--------------------------------------------------

``require_once`` をカッコよく書けます

.. code-block:: json
    :caption: composer.json 参考例

    {
        "autoload": {
            "psr-4": {"FizzBuzz\\": "src/"}
        },
        "autoload-dev": {
            "psr-4": {"FizzBuzz\\": "tests/"}
        }
    }

phpunitコマンドの使い方
--------------------------------------------------

* :command:`vendor/bin/phpunit`
* （PHARを配置した場合 :command:`tools/phpunit`）

.. code-block:: txt

    Usage:
      phpunit [options] <directory|file> ...

.. ディレクトリやファイルのパスを指定する

PHPUnitで書くテストは **3** ステップ
============================================================

1. テストコードのファイルを作る
2. クラスを書く
3. テストケースとしてメソッドを書く

Step1 ファイル作成
--------------------------------------------------

https://docs.phpunit.de/en/10.5/installation.html#manual-download-of-phar

.. code-block:: txt

    .
    ├── src/
    │   └── fizzbuzz.php
    ├── tests/
    │   └── fizzbuzzTest.php
    └── vendor/

（Composerでインストールした場合で進めます。PHARでも動作確認しています）

テストを書くファイル
--------------------------------------------------

* :file:`tests` ディレクトリに配置
* ファイル名は **\*Test.php**

  * ``phpunit`` コマンドにディレクトリのパスが指定されたときに探されるファイル

Step2 クラスを書く
--------------------------------------------------

* PHPUnitが提供する **TestCaseクラスを継承** したクラスを書く
* クラス名は **\*Test**

.. code-block:: php

    use PHPUnit\Framework\TestCase;

    class FizzbuzzTest extends TestCase
    {
    }

Step3 テストケースとしてメソッドを書く (1/2)
--------------------------------------------------

**testで始まる** メソッド名

.. code-block:: php

    class FizzbuzzTest extends TestCase
    {
        public function test_3の倍数のときはFizzを返す(): void
        {
        }
    }

Step3 テストケースとしてメソッドを書く (2/2)
--------------------------------------------------

``fizzbuzz(3)`` と呼び出した返り値は、文字列 ``"Fizz"`` と型と値が同じ（と表明）

.. code-block:: php

    class FizzbuzzTest extends TestCase
    {
        public function test_3の倍数のときはFizzを返す(): void
        {
            $this->assertSame(fizzbuzz(3), "Fizz");
        }
    }

今回はassertSameが適切。assertEqualsではない
--------------------------------------------------

.. code-block:: php

    php > var_dump("1" === "1");  // assertSame
    bool(true)
    php > var_dump("1" == 1);  // assertEquals
    bool(true)
    php > var_dump("1" === 1);  // assertSameなら誤りに気づける
    bool(false)

``Test`` Attributeでもよい 🏃‍♂️ (skip)
--------------------------------------------------

https://docs.phpunit.de/en/10.5/attributes.html#appendixes-attributes-test

.. code-block:: php

    use PHPUnit\Framework\Attributes\Test;

    class FizzbuzzTest extends TestCase
    {
        // 関数名は3で始められないので、_を付けています（他のやり方もあると思います）
        #[Test]
        public function _3の倍数のときはFizzを返す(): void
        {
        }
    }

日本語テストメソッド 🏃‍♂️ (skip)
--------------------------------------------------

* IMO：関数名は **日本語を使ってもよい** と思います
* `実践！ユニットテスト入門（PHPカンファレンス2022） <https://speakerdeck.com/panda_program/unit-testing-for-beginners-at-php-conference-japan-2022?slide=41>`__
* `現在時刻が関わるユニットテストから、テスト容易性設計を学ぶ <https://t-wada.hatenablog.jp/entry/design-for-testability#%E3%83%9D%E3%82%A4%E3%83%B3%E3%83%88-%E6%97%A5%E6%9C%AC%E8%AA%9E%E3%83%86%E3%82%B9%E3%83%88%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89>`__

🥟PHPUnitで書くテストは3ステップ
============================================================

1. テストコードのファイルを作る（:file:`*Test.php`）
2. クラスを書く（``*Test``）
3. テストケースとしてメソッドを書く（``test*``）

https://docs.phpunit.de/en/10.5/writing-tests-for-phpunit.html#asserting-return-values

テスト実行
============================================================

* :command:`vendor/bin/phpunit tests`
* （PHARを配置した場合 :command:`tools/phpunit tests`）

passしたとき
--------------------------------------------------

.. code-block:: txt

    Runtime:       PHP 8.3.2

    .                                                                   1 / 1 (100%)

    Time: 00:00, Memory: 22.77 MB

    OK (1 test, 1 assertion)

failしたとき（わざと落とした）
--------------------------------------------------

.. code-block:: txt

    Runtime:       PHP 8.3.2

    F                                                                   1 / 1 (100%)

    Time: 00:00.001, Memory: 22.77 MB

    There was 1 failure:

    1) fizzbuzz\FizzbuzzTest::test_3の倍数のときはFizzを返す
    Failed asserting that two strings are identical.
    --- Expected
    +++ Actual
    @@ @@
    -'3'
    +'Fizz'

    /.../tests/fizzbuzzTest.php:16

    FAILURES!
    Tests: 1, Assertions: 1, Failures: 1.

テストコードの構成要素
============================================================

.. code-block:: php

    $this->assertSame(fizzbuzz(3), "Fizz");

* 関数に **ある値を入力したときの出力** を検証した
* *3A* という見方を導入

3A
--------------------------------------------------

* Arrange 準備
* Act 実行
* Assert 検証

https://xp123.com/articles/3a-arrange-act-assert/

3Aで見るPHPUnit
--------------------------------------------------

1ステップ1行になるように書き直しています

.. literalinclude:: ../../samplecode/phpunit-example/tests/fizzbuzzTest.php
    :language: php
    :lines: 8-17

Arrange
--------------------------------------------------

テストの **準備** （データの用意など）

.. literalinclude:: ../../samplecode/phpunit-example/tests/fizzbuzzTest.php
    :language: php
    :lines: 8-17
    :emphasize-lines: 5

Act
--------------------------------------------------

テスト対象を **実行** （呼び出す）

.. literalinclude:: ../../samplecode/phpunit-example/tests/fizzbuzzTest.php
    :language: php
    :lines: 8-17
    :emphasize-lines: 6

Assert
--------------------------------------------------

実行結果が期待値と等しいかを **検証**

.. literalinclude:: ../../samplecode/phpunit-example/tests/fizzbuzzTest.php
    :language: php
    :lines: 8-17
    :emphasize-lines: 7-8

.. 意図を伝えるアサーションを選ぼう

第4のA：Annihilate 🏃‍♂️ (skip)
--------------------------------------------------

* クリーンアップ
* 『`ロバストPython <https://www.oreilly.co.jp/books/9784814400171/>`__』第21章より

🥟テストコードの構成要素：3A
============================================================

* Arrange テストの **準備**
* Act テスト対象の **実行**
* Assert 実行結果と期待値の **検証**

tips✨ **パラメタ化** テスト
============================================================

.. code-block:: php
    :caption: 題材

    public function test_3の倍数のときはFizzを返す(): void
    {
    }

3の倍数ならFizz
--------------------------------------------------

``$number`` の **取りうる値は複数**

* 3
* 6
* 9

個別にテストの関数を書く？
--------------------------------------------------

.. code-block:: php

    public function test_3の倍数のときはFizzを返す_3の場合(): void
    {
    }

    public function test_3の倍数のときはFizzを返す_6の場合(): void
    {
    }

**テストメソッドに引数** （パラメタ）を渡せたら！
--------------------------------------------------

.. code-block:: php

    class FizzbuzzTest extends TestCase
    {
        // $numberに3や6を渡せたら
        public function test_3の倍数のときはFizzを返す($number): void
        {
            $this->assertSame(fizzbuzz($number), "Fizz");
        }
    }

PHPUnitでは **Data Provider** でできます！
--------------------------------------------------

.. literalinclude:: ../../samplecode/phpunit-example/tests/parametrizedTest.php
    :language: php
    :lines: 5,7,10-22
    :linenos:

Data Provider
--------------------------------------------------

* https://docs.phpunit.de/en/10.5/writing-tests-for-phpunit.html#data-providers

    | A data provider method must be public and static.
    | It must return a value that is iterable, either an array or an object that implements the Traversable interface.

Data Providerの例
--------------------------------------------------

.. literalinclude:: ../../samplecode/phpunit-example/tests/parametrizedTest.php
    :language: php
    :lines: 12-18
    :linenos:

* ``$number`` に、3、6と順次渡る
* ドキュメントには1回あたり複数の変数を渡す例あり

1つの関数、複数のテストケース
--------------------------------------------------

**個別に書いたのと同じ** 結果が得られる

.. code-block:: txt

    % tools/phpunit tests/parametrizedTest.php
    PHPUnit 10.5.10 by Sebastian Bergmann and contributors.

    Runtime:       PHP 8.3.2

    ..                                                                  2 / 2 (100%)

    Time: 00:00.001, Memory: 22.77 MB

    OK (2 tests, 2 assertions)
