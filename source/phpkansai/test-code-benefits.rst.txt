テストコードが書けるメリット
============================================================

壊してないかなという **不安** に向き合う
============================================================

* 変更しやすいコード（＝本トークにおける良いコード）に近づけていく
* 例：よりよい書き方を知り、それに書き換える
* 変更するたびに、壊していないか不安

例：FizzBuzz
--------------------------------------------------

.. literalinclude:: ../../samplecode/phpunit-example/concept/fizzbuzz_old.php
    :language: php

型を書く（PHPの機能をもっと使う）
--------------------------------------------------

.. literalinclude:: ../../samplecode/phpunit-example/concept/fizzbuzz.php
    :language: php

書き換えで振る舞いを変えていないだろうか？
============================================================

**不安** に対処するいくつかのアプローチ

(A) 祈る 🙏
--------------------------------------------------

* 🙏🙏「どうか変わっていませんように」🙏🙏
* 振る舞いを変えていないか不安だが、 *何も確認はしない*

(B) 手で動作確認 ✋
--------------------------------------------------

* 例えば対話的に ``fizzbuzz`` 関数を実行（:command:`php -a`）

.. code-block:: php

    php > require 'fizzbuzz.php';
    php > echo fizzbuzz(15);
    FizzBuzz

* 安心できるが、 *関数の数が増えて* いくと現実的ではなさそう

(C) コードを書いて動作確認 🤖
--------------------------------------------------

* この発表の本題
* 「手で動作確認」の **自動化** （テストコードを書く）
* プログラムで使う部品のコードは、プログラムを書いて動作確認するという考え方

テストコードの世界へようこそ
============================================================

初見だと独特と感じる用語を紹介

テストケース
--------------------------------------------------

* 1つ1つのテスト
* テストコードがある＝複数のテストケースがある

実行結果
--------------------------------------------------

複数のテストケースをすべて実行すると

* **pass** （全て通る・成功）
* fail （1つでも失敗・落ちる）

テストにおける *値* の呼び方
--------------------------------------------------

.. code-block:: php

    php > $actual = fizzbuzz(15);  // テスト対象を実行した値 (actual value)
    php > $expected = "FizzBuzz";  // 期待結果 (expected value)
    php > var_dump($actual === $expected);
    bool(true)

テストコードがあると
============================================================

.. list-table:: ``$actual === $expected`` を **簡単に確認** できる

    * - actual
      - expected
    * - ``fizzbuzz(3)``
      - ``"Fizz"``
    * - ``fizzbuzz(5)``
      - ``"Buzz"``
    * - ``fizzbuzz(15)``
      - ``"FizzBuzz"``

不安は退屈に変わる
--------------------------------------------------

* 実装中、仕様を満たす **動作するコード** であると確認できる🙌
* 書き換える際も、おかしくしていたら気付ける 🙌（*回帰テスト*）
* ただし、このトークで扱うテストコードとは **開発者のためのテスト** （QAのテストとは別）

書くコードは増えている、けれど
--------------------------------------------------

* 実装に加えてテストコードも書く
* でも、デメリット **<< メリット** だと思うから、📣練習して書けるようになるんだ！

🥟テストコードは良いコードを書く力をつける下地（N=1）
============================================================

* テストコードを書くだけでは良いコードにはならない
* **テストコードは良いコードに近づけるのを助けてくれる**

  * 新しく知った文法を試して書き換えるとき、 誤って振る舞いを変えてしまっても気づける
