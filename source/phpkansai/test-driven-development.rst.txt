テスト駆動開発
============================================================

テストコードが書けるようになると開く扉の中の世界のご紹介

TDD: Test Driven Development
--------------------------------------------------

* 開発手法の1つ。テストが開発を駆動（*運転*）
* 考案者 ケント・ベック（『テスト駆動開発』）
* **開発者のためのテスト** を使って、開発を進めていく（再掲：QAのテストとは別）

ケント・ベックの定義
--------------------------------------------------

    - 自動化されたテストが失敗したときのみ、新しいコードを書く。
    - 重複を除去する。

2つのルール 『テスト駆動開発』Kindle の位置No.33-34

TDDはサイクル♻️
--------------------------------------------------

* Red -> Green -> Refactor
* **何度も何度も** 回す

Red🟥
--------------------------------------------------

* **まずテストコードを書く**
* テストファーストと呼ばれる
* 実装はないので、もちろんテストは落ちる（fail）

Green🟩
--------------------------------------------------

* 実装する（後述）
* テストが通るようになる（pass）
* **テストを通すのを最優先** （「動作する」コード）

Refactor
--------------------------------------------------

* テストが通っている状態でリファクタリングを実施して「 **動作するきれいなコード** 」にする

  * 例：重複を除去する

* 実装だけでなくテストコードもリファクタリング対象

TDDのイメージ
============================================================

何もないところからfizzbuzz関数を実装します

TODOリスト
--------------------------------------------------

.. code-block:: markdown

    - [ ] 数をそのまま文字列に変換する
    - [ ] 3の倍数のときは数の代わりに「Fizz」に変換する
    - [ ] 5の倍数のときは数の代わりに「Buzz」に変換する
    - [ ] 15の倍数のときは数の代わりに「FizzBuzz」に変換する

数をそのまま文字列に変換する って何だ？
--------------------------------------------------

具体例を追加

.. code-block:: markdown
    :caption: TODOリスト

    - [ ] 数をそのまま文字列に変換する
      - [ ] 1を渡すと文字列1を返す
    - [ ] 3の倍数のときは数の代わりに「Fizz」に変換する
    - [ ] 5の倍数のときは数の代わりに「Buzz」に変換する
    - [ ] 15の倍数のときは数の代わりに「FizzBuzz」に変換する

1を渡すと文字列1を返す テスト（Red🟥）
--------------------------------------------------

.. code-block:: php

    class FizzbuzzTest extends TestCase
    {
        public function test_1を渡すと文字列1を返す(): void
        {
            $this->assertSame(fizzbuzz(1), "1");
        }
    }

1を渡すと文字列1を返す 実装（Green🟩）
--------------------------------------------------

.. code-block:: php

    function fizzbuzz(int $number): string
    {
        return "1";
    }

* **仮実装** と呼ばれる
* 作ったテストを間違えていない確認

リファクタリング？
--------------------------------------------------

* 重複があるか？ ーなし
* Red -> Green -> Refactorの1サイクル終了

実装を一般化したい！ TODO追加
--------------------------------------------------

.. code-block:: markdown
    :caption: TODOリスト

    - [ ] 数をそのまま文字列に変換する
      - [ ] 1を渡すと文字列1を返す
      - [ ] 2を渡すと文字列2を返す
    - [ ] 3の倍数のときは数の代わりに「Fizz」に変換する
    - [ ] 5の倍数のときは数の代わりに「Buzz」に変換する
    - [ ] 15の倍数のときは数の代わりに「FizzBuzz」に変換する

2を渡すと文字列2を返す テスト（Red🟥）
--------------------------------------------------

.. code-block:: php

    class FizzbuzzTest extends TestCase
    {
        public function test_2を渡すと文字列2を返す(): void
        {
            $this->assertSame(fizzbuzz(2), "2");
        }
    }

2を渡すと文字列2を返す 実装（Green🟩）
--------------------------------------------------

.. code-block:: php

    function fizzbuzz(int $number): string
    {
        return "$number";
    }

仮実装から一般化された実装へ（「*三角測量*」）

リファクタリング？
--------------------------------------------------

* 重複があるか？
* Data Providerを検討できる
* 発展：具体例を1つずつ追加し、仮実装から一般化した場合、テストケースとして片方消せる

t-wadaさんのライブコーディングをどうぞ
--------------------------------------------------

リズムがつかめるのでオススメ

TODO

.. テストコードをバーっと書いている。その後実装をバーっと書く

小さいテスト駆動開発
============================================================

私はこのスタイルに行き着きつつあります。「小さいは、正義」！

.. 情報量が多かったと思うのでおまけでもいいかも。Ask the speakerに聴きに来ていただいてもOK

Uncle Bob流
--------------------------------------------------

『Clean Craftsmanship』第2章 (Kindle版 pp.52,53)

    1. テストを書くまでは本番コードを書いてはならない。本番コードがないためにテストは失敗する。
    2. 失敗するテストやコンパイルできないテストを必要以上に書いてはならない。失敗を解決するには本番コードを書く。
    3. 失敗しているテストを解決する本番コードを必要以上に書いてはならない。テストがパスしたら、追加のテストを書く。

この3原則により、小さい単位で進む

.. エラーが出たらRed（AssertionErrorだけでなく、コンパイルエラーなど）

.. クラスではなく、fizzbuzz関数でやることになりそう

デモをする（左右に開いて）
============================================================

* 環境構築の確認
* テストを書く（importできない）
* インスタンス化できないを解決
* 該当するメソッド

.. 1つのテストケースを通すまでに、何度も交互に行き来する様子を見ている人に伝えたい
    ベイビーステップ、細かくフィードバックのサイクルを回す

.. いったいこれの何がいいの？と思うはず
    完全にコントロールしている状態（不安が退屈に変わっている）
