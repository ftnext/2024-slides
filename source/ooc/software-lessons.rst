======================================================================
ソフトウェアを作りたかった私へ
======================================================================

変更しやすいコードを書くコツが見えてきた今伝えられること

:Event: Object-Oriented Conference 2024
:Presented: 2024/03/24 nikkie

聞きに来ていただき、ありがとうございます
======================================================================

変更しやすいコードを書きたいですか〜？📣
--------------------------------------------------

コール&レスポンス スライド

お前、誰よ（自己紹介）
======================================================================

* nikkie ／ :fab:`twitter` `@ftnext <https://twitter.com/ftnext>`__ ／ :fab:`github` `@ftnext <https://github.com/ftnext>`__
* ソフトウェア開発 2016年〜（歴8年）
* 2019年〜 株式会社ユーザベースのデータサイエンティスト。 **Python** ・機械学習（`We're hiring! <https://hrmos.co/pages/uzabase/jobs/1829077236709650481>`__）

.. TODO ロゴのURLの確認

Pythonでこんな開発しています
--------------------------------------------------

* バッチ処理（機械学習のパイプライン。ファイルを入力し、ファイルに出力する）
* 自動化処理
* CLI
* ちょっとしたWebアプリケーション（サーバサイドのみ）
* テスト駆動開発

コミュニティ活動（一部抜粋）
--------------------------------------------------

* Python使いの観点から、アウトプット中心の読書会 **読書py** を共同主催
* シーズン1 ミノ駆動本
* シーズン2 ちょうぜつ本（次回最終回予定）

.. include:: introduction.rst.txt

.. include:: strategy-simple.rst.txt

.. include:: how-to-use-class.rst.txt

指針を得るパート
======================================================================

1. シンプル
2. クラスの使い所

まとめ🌯 得た指針
======================================================================

* 小さい部品を組合せる（シンプル。LEGOのように）
* クラスでデータとメソッドをまとめる
* 👉関数やクラスを小さい部品として使っていく

道程
--------------------------------------------------

* 指針を得る（小さい）
* **小さな部品の作り方の気づき**（3点）
* 難所（インターフェース、継承）

.. include:: compose-blocks.rst.txt

道程
--------------------------------------------------

* 指針を得る（小さい）
* 小さな部品の作り方の気づき（3点）
* **難所（インターフェース、継承）**

難所
======================================================================

1. インターフェースとまつわる原則
2. クラスの継承（失敗談）

.. include:: interface-principles.rst.txt

.. include:: do-not-use-inheritance.rst.txt

まとめ🌯 難所からの学び
======================================================================

* インターフェースで使い方を小さく示す
* 具象ではなく、インターフェースに依存する（依存性注入からの発展）
* 継承は最後の選択肢

NEXT 変更しやすいコードをチームで書く
======================================================================

次のわからん殺し

コードはチームで書くもの
--------------------------------------------------

ソフトウェア開発はチームスポーツである（『Team Geek』p.3）

まとめ
======================================================================

ご清聴ありがとうございました
--------------------------------------------------

皆に幸あれ！

引き続きOOCを楽しみましょう

EOF
======================================================================
