.. _Clean Architecture: https://asciidwango.jp/post/176293765750/clean-architecture
.. _Clean Craftsmanship: https://asciidwango.jp/post/693992928727760896/clean-craftsmanship
.. _ミノ駆動本: https://gihyo.jp/book/2022/978-4-297-12783-1
.. _ちょうぜつ本: https://gihyo.jp/book/2022/978-4-297-13234-7
.. _増田本: https://gihyo.jp/book/2017/978-4-7741-9087-7
.. _達人プログラマー（第2版）: https://www.ohmsha.co.jp/book/9784274226298/

======================================================================
ソフトウェアを作りたかった私へ
======================================================================

変更しやすいコードを書くコツが見えてきた今伝えられること

:Event: Object-Oriented Conference 2024
:Presented: 2024/03/24 nikkie

聞きに来ていただき、ありがとうございます
======================================================================

変更しやすいコードを書きたいですか〜？📣
--------------------------------------------------

コール&レスポンス スライド

お前、誰よ（自己紹介）
======================================================================

* nikkie ／ 毎日 `ブログ <https://nikkie-ftnext.hatenablog.com/>`__ 執筆、490日突破
* ソフトウェア開発 2016年〜（歴8年）
* 2019年〜 データサイエンティスト。 **Python** ・機械学習・ソフトウェアエンジニアリング（`We're hiring! <https://hrmos.co/pages/uzabase/jobs/1829077236709650481>`__）

.. image:: ../_static/uzabase-white-logo.png

Pythonでこんな開発しています
--------------------------------------------------

* ファイルを入力し、別のファイルに出力する処理（を組合せた、機械学習パイプライン）
* CLI（小さいライブラリを個人開発）
* **テストコード** 書いてます（リファクタリング ゴリゴリ）
* 経験が薄いもの：がっつりWebアプリ開発、DDD

.. ソフトウェアを書きたい！もこれが前提にある

.. include:: introduction.rst.txt

指針を得るパート
======================================================================

1. シンプル
2. クラスの使い所

.. include:: strategy-simple.rst.txt

.. include:: how-to-use-class.rst.txt

まとめ🌯 得た指針
======================================================================

* **小さい部品を組合せる** （シンプル。LEGOのように）
* クラスでデータとメソッドをまとめる
* 👉関数やクラスを小さい部品として使っていく

道程
--------------------------------------------------

* 指針を得る（小さい）
* **小さな部品の作り方の気づき** （3点）
* 難所（インターフェース、継承）

.. include:: compose-blocks.rst.txt

道程
--------------------------------------------------

* 指針を得る（小さい）
* 小さな部品の作り方の気づき（3点）
* **難所（インターフェース、継承）**

難所
======================================================================

1. インターフェースとまつわる原則
2. クラスの継承（失敗談）

.. include:: interface-principles.rst.txt

.. include:: do-not-use-inheritance.rst.txt

まとめ🌯 難所からの学び
======================================================================

* インターフェースで **使い方** を小さく示す
* 具象ではなく、インターフェースに依存する（**依存性注入からの発展**）
* 継承は最後の選択肢（インターフェースや委譲を使う）

NEXT 変更しやすいコードを **チーム** で書く
======================================================================

次のわからん殺し（今の思考のダンプです）

コードはチームで書くもの
--------------------------------------------------

    ソフトウェア開発はチームスポーツである（『`Team Geek <https://www.oreilly.co.jp/books/9784873116303/>`__』p.3）

チームで、変更しやすいコードを書きたい！🔥
--------------------------------------------------

* *常時ペアプロ* という環境
* 私は変更しやすいコードを書きたい！で、ソフトウェアについて知った部分が増えた。チームにも還元できる
* nikkieがいなくなっても、ソフトウェアが書け、さらによりよくしていけるチーム、どうやる？？

easyが必要な可能性？
--------------------------------------------------

* 小さな部品、その組合せはまずい（操作ミス）という事象
* 小さな部品を使いやすく組合せて提供する？
* 「`正しい使い方を簡単に、誤った使い方を困難に <https://yoshi389111.github.io/kinokobooks/prog_ja/prog053.htm>`__」

🌯まとめ：ソフトウェアを作りたかった私へ
======================================================================

* 振る舞いを変更しやすい **構造** のコードを書くには
* **小さい** 部品（関数・クラス）を組み合わせた構造を採用した

🌯変更しやすいコードを書くコツが見えてきた今伝えられること 1/2
------------------------------------------------------------

* 単一責務は恣意的
* 入出力と計算判断を **分ける**
* 使うと作るを **分ける**

🌯変更しやすいコードを書くコツが見えてきた今伝えられること 2/2
------------------------------------------------------------

* インターフェースとは **使い方**。使うと作るを分けた先
* 継承は（理解するまでは）初手で使ってはいけません

謝辞❤️
--------------------------------------------------

* 登壇練習会に協力いただいた開発チーム有志（Hさん、Nさん、Hさん）
* OOC 2024 スタッフの皆さま
* 知恵を書籍という形で伝えてくださった著者の皆さま
* 読書会共同主催のnibuさん、これまでの参加者の皆さま
* And You!!

ご清聴ありがとうございました
--------------------------------------------------

皆に **幸** あれ！

引き続きOOCを楽しみましょう

.. include:: appendix.rst.txt

EOF
======================================================================
