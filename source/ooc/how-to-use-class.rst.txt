2️⃣クラスをどう使うかを知る
======================================================================

.. 部品についてのパート

* 小さい部品？ 関数は任せて！
* クラス？ うっ...🙈

ずっと分からなかった、クラスの使い所
--------------------------------------------------

* nikkieは、（必ずクラスを書く）Javaの経験がありません

  * 関数でも書ける言語を使ってきた（PHP、Python）

* 「文法は完全に理解したが、 **クラスはどんな時に使うの？**」

クラスの文法を説明する例：犬
--------------------------------------------------

.. code-block:: python
    :linenos:

    class Dog:
        kind = 'canine'  # クラス変数

        def __init__(self, name):
            self.name = name  # インスタンス変数

`Python チュートリアル「9.3.5. クラスとインスタンス変数」 <https://docs.python.org/ja/3/tutorial/classes.html#class-and-instance-variables>`__

よい構造のコードとしてのクラスの例（`ミノ駆動本`_ 2章）
------------------------------------------------------------

    強く関係し合うデータとロジックを一箇所にギュッと集めておく (Kindle版 p.51)

例：ヒットポイント

Pythonでの実装例
------------------------------------------------------------

.. literalinclude:: ../../samplecode/software-journey/hitpoint_minodriven.py
    :language: python
    :linenos:

`実装の全体 <https://github.com/ftnext/exile-of-the-wicked-py/blob/ef07c9a870013580b240f9a6d05f0d4dbecb9a88/chapter2/first_step.py>`__

クラス変数
------------------------------------------------------------

ヒットポイントの最大、最小

.. literalinclude:: ../../samplecode/software-journey/hitpoint_minodriven.py
    :language: python
    :linenos:
    :emphasize-lines: 2-3

インスタンス変数
------------------------------------------------------------

値を検証している！！

.. literalinclude:: ../../samplecode/software-journey/hitpoint_minodriven.py
    :language: python
    :linenos:
    :emphasize-lines: 5-11

ヒットポイントに関わるメソッド
------------------------------------------------------------

.. literalinclude:: ../../samplecode/software-journey/hitpoint_minodriven.py
    :language: python
    :linenos:
    :emphasize-lines: 13-17

クラスは **データとロジックをまとめる** もの
------------------------------------------------------------

* 文法を学べば、処理系が動作するクラスは書ける
* コードの構造としてよいクラスも悪いクラスも、同様に動作してしまう
* 良し悪しの **判断基準** 「まとめているか」（過去の私はこれが持てていなかった）

データだけのクラスに注意⚠️
------------------------------------------------------------

* **ロジックを持たない**
* クラスを使うコードがデータを取り出して加工してしまっている
* 私はよくやってました

データクラス
------------------------------------------------------------

* 悪しき構造として知られる（`増田本`_ 第3章・`ミノ駆動本`_ 第1章）
* リファクタリングでは、データを取り出して加工するコードを **クラスの中へ移動する**

クラスを使う側のコードよ、 **楽** してこうぜ
------------------------------------------------------------

クラスにデータとロジックをまとめる効能

参考：「コーヒーちょうだい」
------------------------------------------------------------

.. raw:: html

    <iframe class="speakerdeck-iframe" style="border: 0px; background: rgba(0, 0, 0, 0.1) padding-box; margin: 0px; padding: 0px; border-radius: 6px; box-shadow: rgba(0, 0, 0, 0.2) 0px 5px 40px; width: 100%; height: auto; aspect-ratio: 560 / 395;" frameborder="0" src="https://speakerdeck.com/player/d4f99108649049b1a0f91c86e7890b98?slide=7" title="Tell, don't ask" allowfullscreen="true" data-ratio="1.4177215189873418"></iframe>

参考：`増田本`_ 第1章
------------------------------------------------------------

    使う側のプログラムの記述がかんたんになるように、使われる側のクラスに便利なメソッドを用意する (Kindle版 p.54)
