2️⃣入出力と計算を **分ける**
======================================================================

分けて小さく、再利用しやすく

計算結果を書き込む処理（悪しき例）
--------------------------------------------------

.. code-block:: python
    :linenos:

    def save_result(data, file_path):
        result = []
        for obj in data:
            # 実際は、summaryの末尾に句点「。」がなければ補うなども入ってきます
            result.append({"text": obj["summary"] + obj["detail"]})

        with jsonlines.open(file_path, "w") as writer:
            writer.write_all(result)

参考例：クラスの場合
--------------------------------------------------

.. code-block:: python
    :linenos:

    class DataCollection:
        def __init__(self, data):
            self.data = data

        def save(self, file_path):
            result = []
            for obj in self.data:
                result.append({"text": obj["summary"] + obj["detail"]})

            with jsonlines.open(file_path, "w") as writer:
                writer.write_all(result)

.. saveに使うインスタンスを渡していくように発展しそう

少し後になって
--------------------------------------------------

* 「今から実装する処理、前に作った ``save_result()`` と **同じ計算** が出てくる。その計算結果をさらに計算するのか」
* 「 ``save_result()`` 使えば最初の計算はできるな。あれ、これなんでファイルに保存までするの？ 余計〜」

実はテストも書きづらかった
--------------------------------------------------

.. code-block:: python
    :linenos:

    @patch("(Pythonの詳細なので略).jsonlines")
    def test_save_result(jsonlines):  # 書き込まないようモックにする
        writer = jsonlines.open.return_value.__enter__.return_value
        data = [
            # 実際はsummaryやdetail以外の項目も含みます
            {"summary": "すごい要約。", "detail": "かくかくしかじか、ほげほげふがふが"},
            {"summary": "今北産業", "detail": "..."},
        ]

        save_result(data, file_path)

        writer.write_all.assert_called_once_with(
            [
                {"text": "すごい要約。かくかくしかじか、ほげほげふがふが"},
                {"text": "今北産業。..."},
            ]
        )

計算して保存する関数を書いていた私
--------------------------------------------------

* **計算部分だけ再利用できない** （保存が余計）
* テストコードはデータとその計算結果を含むので、縦に長くなる

🧭入出力と計算判断を分ける
--------------------------------------------------

.. raw:: html

    <iframe class="speakerdeck-iframe" style="border: 0px; background: rgba(0, 0, 0, 0.1) padding-box; margin: 0px; padding: 0px; border-radius: 6px; box-shadow: rgba(0, 0, 0, 0.2) 0px 5px 40px; width: 100%; height: auto; aspect-ratio: 560 / 315;" frameborder="0" src="https://speakerdeck.com/player/d663c3f2afec45379371126260431048?slide=12" title="これだけは知っておきたいクラス設計の基礎知識" allowfullscreen="true" data-ratio="1.7777777777777777"></iframe>

計算と出力を分けて書く
--------------------------------------------------

.. code-block:: python
    :linenos:

    def calculate(data):  # データを受け取ってデータを返す
        result = []
        for obj in data:
            result.append({"text": obj["summary"] + obj["detail"]})
        return result

    def write(file_path, data):  # ファイルに保存する処理
        with jsonlines.open(file_path, "w") as writer:
            writer.write_all(data)

    # calculateしてwriteするとして、先のsave_resultを実現

入出力と計算判断を分けた実装
--------------------------------------------------

* **計算** では **メモリ上のデータ** を扱う。再利用しやすい
* 永続化は出力処理で担う。計算は気にしなくてよい（出力形式の変更も対応できる）
* 小さく分かれたので、テストコードも書きやすい

ふりかえると、注目すべき箇所が見えていなかった
--------------------------------------------------

* コードの行数に注目していた（N行くらいだから関数にしよう）
* コードの **目的** （入出力、計算判断）に盲目でした
* 混ぜていたので、計算だけ使えない

入出力と計算判断を分けていく
--------------------------------------------------

過去の自分のコードをリファクタリングしていく

* `関数の抽出 <https://refactoring.com/catalog/extractFunction.html>`__
* `関数のインライン化 <https://refactoring.com/catalog/inlineFunction.html>`__

目的ごとに関数に **抽出**
--------------------------------------------------

.. code-block:: python
    :linenos:

    def save_result(data, file_path):
        result = calculate(data)
        write(result, file_path)

    def calculate(data):
        result = []
        for obj in data:
            result.append({"text": obj["summary"] + obj["detail"]})
        return result

    def write(file_path, data):
        with jsonlines.open(file_path, "w") as writer:
            writer.write_all(data)

元の関数を **インライン化**
--------------------------------------------------

.. code-block:: python

    # save_resultを呼び出していた箇所（呼び出しがなくなる）
    result = calculate(data)
    write(result, file_path)

参考： **基本** のリファクタリングテクニックでできちゃいます
------------------------------------------------------------

『`リファクタリング（第2版） <https://www.ohmsha.co.jp/book/9784274224546/>`__』6章「リファクタリングはじめの一歩」

* 関数の抽出
* 関数のインライン化
* 関数宣言の変更（後述）
