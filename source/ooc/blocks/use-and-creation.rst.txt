3️⃣作ると使うを **分ける**
======================================================================

分けて小さく、拡張しやすく

例：外部のWeb APIを使ったOCR（光学文字認識）
--------------------------------------------------

* 画像中の文字を認識（例：標識）
* ドキュメントの画像から文字を認識（例：帳票）

手元にクライアントを実装
--------------------------------------------------

* 画像中の文字を認識（例：標識）： ``ImageOcrClient`` 使うぞ！
* ドキュメントの画像から文字を認識（例：帳票）： ``DocumentOcrClient``

``recognize()`` メソッドで使う

作ると使うが一体となった処理（悪しき例）
--------------------------------------------------

.. code-block:: python

    def execute_ocr(...) -> str:
        client = ImageOcrClient()
        result = client.recognize(...)  # 読み込んだ画像を渡す
        return result

.. クラスの例（__init__で作っちゃう）

少し後になって
--------------------------------------------------

* 「ドキュメントの画像からの文字認識も試したい」
* ``DocumentOcrClient().recognize()`` に画像を渡す
* 「 ``execute_ocr()`` あるけど、別に関数作ったほうがいいかー」

爆誕する似た処理
--------------------------------------------------

.. code-block:: python

    def execute_document_ocr(...) -> str:
        client = DocumentOcrClient()
        result = client.recognize(...)  # 読み込んだ画像を渡す
        return result

作ると使うが一体の関数を書いていた私へ
--------------------------------------------------

* 3つ目のクライアントを追加したら、 ``execute_ocr`` の亜種をまた増やしますか？
* クライアントの文字認識結果を返すだけ。なのに ``execute_ocr()`` の拡張で済まないのはどうして？

テストはこんな感じでした
--------------------------------------------------

.. code-block:: python

    @patch("(Pythonの詳細なので略).ImageOcrClient")
    def test_execute_ocr(ImageOcrClient):  # 通信しないようモックにする
        actual = execute_ocr()

        ImageOcrClient.assert_called_once_with()
        ImageOcrClient.recognize.assert_called_once_with(...)

🧭生成と使用の分離
--------------------------------------------------

* 『ちょうぜつ本』第7章
* 作ると使うを **分けよう**

生成と使用
--------------------------------------------------

:生成（作る）: 処理が依存するモノ（例： ``client``）を作ること
:使用（使う）: 処理が依存するモノを使うこと

使う **だけ**
--------------------------------------------------

* 使う時に作るように実装しない
* 依存するモノは外で作られて **与えられる** （依存性注入💉）
* 操作するだけ

作ると使うを分けて書く
--------------------------------------------------

.. code-block:: python

    def execute_ocr(client, ...) -> str:
        result = client.recognize(...)
        return result
    
    # ImageOcrClientを作ってexecute_ocr関数を呼び出す

作ると使うを分けた実装
--------------------------------------------------

* 与えられた ``client`` を使うだけ！
* ``ImageOcrClient`` を渡しても ``DocumentOcrClient`` を渡してもよい
* 画像を受け付ける ``recognize()`` メソッドを持ったモノならいいぞ（👉インターフェースの話へ）

作ると使うを分けていく
--------------------------------------------------

* 過去の自分のコードをリファクタリング
* 関数宣言の変更（抽出 & インライン化）

一時的な関数に抽出
--------------------------------------------------

.. code-block:: python

    def execute_ocr(...) -> str:
        client = ImageOcrClient()
        return xx_execute_ocr(client)

    def xx_execute_ocr(client) -> str:
        result = client.recognize(...)
        return result

元の関数をインライン化
--------------------------------------------------

.. code-block:: python

    def xx_execute_ocr(client) -> str:
        result = client.recognize(...)
        return result

    client = ImageOcrClient()
    return xx_execute_ocr(client)

関数名をrename
--------------------------------------------------

.. code-block:: python

    def execute_ocr(client) -> str:
        result = client.recognize(...)
        return result

    client = ImageOcrClient()
    return execute_ocr(client)
