3️⃣作ると使うを **分ける**
======================================================================

分けて小さく、拡張しやすく

例：外部のWeb APIを使ったOCR（光学文字認識）
--------------------------------------------------

* 画像中の文字を認識（例：標識）
* ドキュメントの画像から文字を認識（例：帳票）

手元にクライアントを実装
--------------------------------------------------

* 画像中の文字を認識（例：標識）： ``ImageOcrClient``
* ドキュメントの画像から文字を認識（例：帳票）： ``DocumentOcrClient``

``recognize()`` メソッドで使う

作ると使うが一体となった処理（悪しき例）
--------------------------------------------------

「``ImageOcrClient`` 使うぞ！」

.. code-block:: python
    :linenos:

    def execute_ocr(image) -> str:
        client = ImageOcrClient()
        result = client.recognize(image)  # 読み込まれた画像を渡す
        return result

参考例：クラスの場合
--------------------------------------------------

.. code-block:: python
    :linenos:

    class OcrExecutor:
        def __init__(self):
            self.client = ImageOcrClient()

        def execute(self, image):
            result = client.recognize(image)
            return result

少し後になって
--------------------------------------------------

* 「ドキュメントの画像からの文字認識も試したい」
* ``DocumentOcrClient().recognize()`` に画像を渡す
* 「 ``execute_ocr()`` あるけど、別に関数作ったほうがいいかー」

爆誕する似た処理
--------------------------------------------------

.. code-block:: python
    :linenos:

    def execute_document_ocr(image) -> str:
        client = DocumentOcrClient()
        result = client.recognize(image)
        return result

作ると使うが一体の関数を書いていた私へ
--------------------------------------------------

* 3つ目のクライアントを追加したら、 ``execute_ocr`` の亜種をまた増やしますか？
* クライアントの文字認識結果を返すだけ。なのに ``execute_ocr()`` の拡張で済まないのはどうして？

🧭生成と使用の分離
--------------------------------------------------

* 『`ちょうぜつ本`_』第7章
* 作ると使うを **分けよう**

生成と使用
--------------------------------------------------

:生成（作る）: 処理が依存するモノ（例： ``client``）を作ること
:使用（使う）: 処理が依存するモノを使うこと

使う **だけ**
--------------------------------------------------

* 使う時に作るように実装しない
* 依存するモノは外で作られて **与えられる** （依存性注入💉）
* 操作するだけ

作ると使うを分けて書く
--------------------------------------------------

.. code-block:: python
    :linenos:

    def execute_ocr(client, image) -> str:
        result = client.recognize(image)
        return result
    
    # ImageOcrClientを作ってexecute_ocr関数を呼び出す

作ると使うを分けた実装
--------------------------------------------------

* 与えられた ``client`` を使うだけ！（使い方は共通だった！）
* ``ImageOcrClient`` を渡しても ``DocumentOcrClient`` を渡してもよい
* 画像を受け付ける ``recognize()`` メソッドを持ったモノならいいぞ（👉インターフェースの話へ）

作ると使うを分けていく
--------------------------------------------------

過去の自分のコードをリファクタリング

* `関数宣言の変更 <https://refactoring.com/catalog/changeFunctionDeclaration.html>`__ （抽出 & インライン化）

一時的な関数に **抽出**
--------------------------------------------------

.. code-block:: python
    :linenos:

    def execute_ocr(image) -> str:
        client = ImageOcrClient()
        return xx_execute_ocr(client, image)

    def xx_execute_ocr(client, image) -> str:
        result = client.recognize(image)
        return result

元の関数を **インライン化**
--------------------------------------------------

.. code-block:: python
    :linenos:

    def xx_execute_ocr(client, image) -> str:
        result = client.recognize(image)
        return result

    client = ImageOcrClient()
    xx_execute_ocr(client, image)

関数名をrename
--------------------------------------------------

.. code-block:: python
    :linenos:

    def execute_ocr(client, image) -> str:
        result = client.recognize(image)
        return result

    client = ImageOcrClient()
    execute_ocr(client, image)
