小さな部品の作り方
======================================================================

1. 小さい責務とは
2. 入出力と計算判断
3. 作ると使う

小さいは、正義！

1️⃣小さい責務とは
======================================================================

SOLIDのSについて

※ここでは責任と責務を同じものと扱っていきます

単一責任原則
--------------------------------------------------

    モジュールを変更する理由はたったひとつだけであるべき

『`Clean Architecture`_』第7章

単一責任の私の **誤解**
--------------------------------------------------

* 数学の証明のように、この状況であれば **単一責任は絶対こう決まると示せる** と私は思っていた
* クラスの責務は絶対の解があるという思い込み

単一責任は **恣意的**
--------------------------------------------------

    クラスの責務は、何かの法則で機械的に決まるものではなく、将来の保守開発への想像から恣意的に生み出すもの (Kindle 版 p.152)

`ちょうぜつ本`_ 5.2

恣意的（スーパー大辞林）
--------------------------------------------------

    その時々の思いつきで物事を判断するさま。

例：このデータベースドライバは単一責任？
--------------------------------------------------

* データベースを読み取る
* データベースに書き込む
* 読み書き（と *2つのこと* を）やっているけれど、単一責任？

単一責任！（ちょうぜつ本の解答）
--------------------------------------------------

* 「ドライバのreadとwriteを分けるよりも、ドライバ **ver1とver2を分けるのを優先**」
* 別の文脈では、readとwriteを分けることがありうるという気づき

コード例
--------------------------------------------------

.. code-block:: python
    :linenos:

    class DatabaseDriverInterface(metaclass=ABCMeta):
        @abstractmethod
        def write(self, key: str, data) -> None:
            ...

        @abstractmethod
        def read(self, key: str):
            ...


    class DatabaseDriverVer1(DatabaseDriverInterface):
        def write(self, key: str, data) -> None:
            ...

        def read(self, key: str):
            ...


    class DatabaseDriverVer2(DatabaseDriverInterface):
        def write(self, key: str, data) -> None:
            ...

        def read(self, key: str):
            ...

`コード例の全容 <https://github.com/ftnext/transcendent-book-py/blob/4c2b8c0064aa67be6d98e239cfdb1430f1e59cc7/chapter5/database_drivers.py>`__

単一責任
--------------------------------------------------

* **将来のコードの変更を想像** して決める（保守、拡張）
* 単一責任が現実と合わなくなったら修正すればよいのか！

.. include:: blocks/io-and-calculation.rst.txt

.. include:: blocks/use-and-creation.rst.txt

まとめ🌯 小さな部品の作り方
======================================================================

* 小さい責務は **恣意的** に決める
* 小さく切り出す際は、コードの行数だけでなく **目的** にも目を向ける（入出力、計算）
* 依存するモノを引数で渡す（**依存性注入**）
