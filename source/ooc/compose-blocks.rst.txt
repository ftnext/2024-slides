小さな部品の作り方
======================================================================

小さいは、正義！

単一責任は恣意的
======================================================================

SOLIDのSについて

単一責任原則
--------------------------------------------------

    モジュールを変更する理由はたったひとつだけであるべき

『Clean Architecture』第7章

単一責任の私の誤解
--------------------------------------------------

* 数学の証明のように、この状況であれば単一責任は絶対こう決まると示せると私は思っていた
* クラスの責務は絶対の解があるという思い込み

単一責任は **恣意的**
--------------------------------------------------

    クラスの責務は、何かの法則で機械的に決まるものではなく、将来の保守開発への想像から恣意的に生み出すもの (Kindle 版 p.152)

ちょうぜつ本 5.2

読み書きするデータベースドライバは単一責任か？
--------------------------------------------------

* **ちょうぜつ本の例の文脈では単一責任とした**

  * ドライバのreadとwriteを分けるよりも、ドライバver1とver2を分けるのを優先

* 別の文脈では、readとwriteを分けることがありうる！

コード例
--------------------------------------------------

.. code-block:: python

    class DatabaseDriverInterface(metaclass=ABCMeta):
        @abstractmethod
        def write(self, key: str, data) -> None:
            ...

        @abstractmethod
        def read(self, key: str):
            ...


    class DatabaseDriverVer1(DatabaseDriverInterface):
        def write(self, key: str, data) -> None:
            ...

        def read(self, key: str):
            ...


    class DatabaseDriverVer2(DatabaseDriverInterface):
        def write(self, key: str, data) -> None:
            ...

        def read(self, key: str):
            ...

`コード例の全容 <https://github.com/ftnext/transcendent-book-py/blob/4c2b8c0064aa67be6d98e239cfdb1430f1e59cc7/chapter5/database_drivers.py>`__

.. include:: blocks/io-and-calculation.rst.txt

.. include:: blocks/use-and-creation.rst.txt
